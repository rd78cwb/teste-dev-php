# redis.conf

# ----------------------------------------------------------------------------
# NETWORK
# ----------------------------------------------------------------------------

# By default, if no "bind" configuration directive is specified,
# Redis listens in all the network interfaces available on the server.
# In a container environment, binding to 0.0.0.0 is usually desired
# to allow access from other containers on the same network.
bind 0.0.0.0

# Protected mode is enabled by default. When protected mode is enabled,
# Redis only accepts connections from the loopback address (127.0.0.1).
# For production environments, you should disable protected mode and
# set a strong password using requirepass.
protected-mode no

# Accept connections on the specified port.
port 6379

# ----------------------------------------------------------------------------
# GENERAL
# ----------------------------------------------------------------------------

# Set the number of databases. The default database is DB 0.
databases 16

# Specify the server verbosity level.
# This can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not as much as debug)
# notice (moderately verbose, good for production environments)
# warning (only very important / critical messages are logged)
loglevel notice

# Specify the log file name. Also "stdout" can be used to force
# Redis to log on the standard output.
logfile stdout

# ----------------------------------------------------------------------------
# SNAPSHOTTING (RDB Persistence)
# ----------------------------------------------------------------------------

# Save the DB on disk:
#   save <seconds> <changes>
# Disable RDB persistence by commenting out all "save" lines.
# save 900 1     # Save if at least 1 key changed in 15 minutes
# save 300 10    # Save if at least 10 keys changed in 5 minutes
# save 60 10000  # Save if at least 10000 keys changed in 1 minute

# By default Redis will refuse to write on disk if running out of disk space.
stop-writes-on-bgsave-error yes

# Compress RDB files?
rdbcompression yes

# Store checksum for RDB files?
rdbchecksum yes

# The filename of the dump file.
dbfilename dump.rdb

# ----------------------------------------------------------------------------
# APPEND ONLY MODE (AOF Persistence)
# ----------------------------------------------------------------------------

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good when your data is not critical and you can afford to lose a few
# seconds of data in case of a power outage, etc.
#
# Highly critical data sets may instead require a stronger guarantee that
# no data is lost. In order to obtain this in a usable way, Redis supports
# a fully durable mode called AOF (Append Only File).
#
# When AOF is enabled, every write operation received by the server is
# logged in the AOF file, using a format similar to the Redis protocol
# itself.
#
# It is strongly advised to use AOF + RDB persistence. In case of a crash,
# Redis will use the AOF file to recover the dataset, as it is usually
# the most complete one.
appendonly yes

# The name of the append only file (default: "appendonly.aof")
appendfilename "appendonly.aof"

# The fsync() system call tells the kernel to write data from the internal
# cache to disk. The three specified modes are:
# no: don't fsync, just put data in the kernel buffer. Faster.
# always: fsync every time new commands are appended to the AOF. Very slow.
# every: fsync every second. Compromise between speed and data safety.
appendfsync every

# When the AOF file becomes too big, Redis is able to automatically
# rewrite it in the background. The following two options configure the
# automatic rewrite:
# auto-aof-rewrite-percentage 100
# auto-aof-rewrite-min-size 64mb

# ----------------------------------------------------------------------------
# SECURITY
# ----------------------------------------------------------------------------

# Require a password to authenticate the clients.
# Please use a strong password.
# requirepass your_very_strong_password # <-- CHANGE THIS TO A REAL, STRONG PASSWORD!

# ----------------------------------------------------------------------------
# MEMORY MANAGEMENT
# ----------------------------------------------------------------------------

# Set a memory limit in bytes. When the memory limit is reached Redis
# will start removing keys according to the configured eviction policy.
# maxmemory <bytes> # Example: maxmemory 100mb

# Select the eviction policy to use when maxmemory is reached.
# Possible values are:
# volatile-lru -> Evict using approximated LRU among the keys with an expire set.
# allkeys-lru -> Evict using approximated LRU among all the keys.
# volatile-lfru -> Evict using approximated LFU among keys with an expire set.
# allkeys-lfru -> Evict using approximated LFU among all keys.
# volatile-random -> Remove random keys among keys with an expire set.
# allkeys-random -> Remove random keys among all keys.
# volatile-ttl -> Remove keys with the nearest expiration time (minor TTL)
# noeviction -> Don't evict anything, just return an error on write operations.
# maxmemory-policy noeviction

# ----------------------------------------------------------------------------
# LAZYFREEING
# ----------------------------------------------------------------------------

# Redis has two policies to free memory when needed:
# 1) Eager freeing: Immediately frees memory synchronously.
# 2) Lazy freeing: Defers memory freeing in a background thread.
# lazyfree-lazy-expire yes
# lazyfree-lazy-server-del yes
# lazyfree-lazy-eviction yes

# ----------------------------------------------------------------------------
# DOCKER
# ----------------------------------------------------------------------------

# In a Docker environment, setting 'supervised no' (the default) is typical.
# supervised no
# Or use systemd: supervised systemd
# Or use upstart: supervised upstart